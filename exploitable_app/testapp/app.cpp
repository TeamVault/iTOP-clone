#include <stdint.h>
#include <vector>
#include <iostream>
#include "app.h"

char target[] = "/bin/sh";

using namespace std;

void Dummy::call_me() {
    cout << "Dummy::call_me" << endl;
}

void Mainloop::mainloop() {
    for (int i=0; i<object_count; ++i) {
        objects[i]->call_me();
    }
}

int Reader::read_into_reg() {
    int x =  a*5;
    int y = b*3;
    int z = c*2;
    int w = d+1;
    int u = x + 2*y;
    int v = x + y + z + w;
    return x+y+z+w+u+v;
}

void Reader::save(int n, long m) {
    a = n;
    b = (int)m;
}

void Reader::read_from_mem() {
    long x = *e;
    save(1, x);
}

long Manipulator::manipulate(long input) {
    input += value;
    return input;
}

void CallMe2::indirect_call1() {
    asm(
    "movq %rdx, %r15"
    );
    target_fn(value);
    asm(
    "movq %r15, %rdx"
    );
}

void CallMe2::indirect_call2(uintptr_t* target) {
    target_fn(target);
}

void FunctionDispatchLoop::functionloop() {
    for (int i=0; i<fn_count; ++i) {
        target_fns[i]();
    }
}

void fn_load_rdi_10() {
    asm ("movq $0x10, %rdi");
}

void fn_load_rdx() {
    asm ("movq $140737347411271, %rdx");
}

void fn_manipulate_rdi() {
    asm ("addq %rdx, %rdi");
}

void LooplessDispatch::call_both() {
    D1->call_me();
    D2->call_me();
}

void LinkedListDispatch::iterate() {
    node *tmp;
    for (;;) {
        if (l.head == NULL) {
            return ;
        }
        tmp = l.head;
        l.head = tmp->next;
        tmp->data->call_me();
    }
}

void Writer::write() {
    *target = value;
}

void Conditional::test(long x) {
    if (x == target_val)
        *target = value;
}

void Conditional::test2(long x, long y) {
    if (y == target_val)
        *target = value;
}

void Executer::call() {
    asm(
            "push %rdx"
            );
    target_fn(var1, var2, var3);
    asm(
            "pop %rdx"
            );
}

void Initializer::initialize_rsi() {
    asm(
            "movq %0, %%rsi"
            :
            : "b" (value)
            );
}

void Initializer::initialize_rdx() {
    asm(
            "movq %0, %%rdx"
            :
            : "b" (value)
    );
}

void Initializer::initialize_rcx() {
    asm(
    "movq %0, %%rcx"
    :
    : "b" (value)
    );
}

void Incrementer::increment_rcx() {
    asm(
    "inc %rcx"
    );
}

void Incrementer::increment_rdx() {
    asm(
    "inc %rdx"
    );
}

void Incrementer::increment_rsi() {
    asm(
    "inc %rsi"
    );
}

void Incrementer::increment_stack() {
    asm(
    "add $0x16, %rsp;"
    "ret;"
    );
}

void Incrementer::decrement_stack() {
    asm(
    "sub $0x8, %rsp;"
    "ret;"
    );
}
