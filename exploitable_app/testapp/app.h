//
// Created by richard on 7/29/18.
//

#ifndef APP_APP_H
#define APP_APP_H

#include <stdint.h>
#include <vector>
#include <iostream>

class CallMe {
private:
    void (*target_fn)(uintptr_t*);
    uintptr_t arg;
public:
    virtual void indirect_call();
};

class CallMe2 {
private:
    void (*target_fn)(uintptr_t*);
    uintptr_t* value;
public:
    virtual void indirect_call2(uintptr_t* target);
    virtual void indirect_call1();
};

class Reader {
private:
    int a,b,c,d;
    long *e;
public:
    virtual void read_from_mem();
    virtual int read_into_reg();
    virtual void save(int, long);
};

class Manipulator {
private:
    long value;
public:
    virtual long manipulate(long);
};

class Dummy {
public:
    virtual void call_me();
};

class Mainloop {
public:
    int object_count;
    Dummy **objects;
    virtual void mainloop();
};

typedef void (*FUNCTION) ();

class FunctionDispatchLoop {
public:
    int fn_count;
    FUNCTION *target_fns;
    virtual void functionloop();
};

class LooplessDispatch {
public:
    Dummy *D1;
    Dummy *D2;
    virtual void call_both();
};

struct node {
    int num;
    Dummy *data;
    node *next;
};

class list {
public:
    node *head, *tail;
    list() {
        head=NULL;
        tail=NULL;
    }
};

class LinkedListDispatch {
public:
    list l;
    virtual void iterate();
};

class Writer {
    long* target;
    long value;
    virtual void write();
};

class Conditional {
    long* target;
    long value;
    long target_val;
    virtual void test(long);
    virtual void test2(long, long);
};

class Executer {
    void (*target_fn)(long, long, long);
    long var1;
    long var2;
    long var3;
    virtual void call();
};

class Initializer {
    long value;
    virtual void initialize_rsi();
    virtual void initialize_rdx();
    virtual void initialize_rcx();
};

class Incrementer {
    long value;
    virtual void increment_rsi();
    virtual void increment_rdx();
    virtual void increment_rcx();
    virtual void increment_stack();
    virtual void decrement_stack();
};

#endif //APP_APP_H

